{"version":3,"sources":["components/Tick.js","components/contextTypes.js","components/Tree.js","util/treeUtil.js","App.js","index.js"],"names":["Tick","useState","n","setN","useEffect","time","setInterval","clearInterval","TreeContext","React","createContext","Tree","props","tree","map","item","title","children","id","key","checkable","Node","Consumer","context","type","onClick","createNode","style","listStyle","deleteNode","placeholder","convertTreeToList","treeNodeList","flattenList","dig","list","forEach","treeNode","push","length","parentId","split","slice","join","convertListToTree","node","record","i","add","flattenData","index","num","last","Number","currentIndex","App","state","treeData","newTreeData","setState","filter","Provider","value","this","Component","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.432b68a9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Tick = () => {\n    const [n, setN] = useState(0)\n    useEffect(() => {\n        const time = setInterval(() => {\n            setN(n + 1)\n        }, 1000)\n\n        return () => {\n            clearInterval(time)\n        }\n    })\n    return (\n        <span>{` *Life:${n}s`}</span>\n    );\n}\n\nexport default Tick;","import React from \"react\";\n\nexport const TreeContext = React.createContext(null)","import React from 'react';\nimport Tick from './Tick'\n// import classNames from 'classnames';\nimport { TreeContext } from './contextTypes'\n\nconst Tree = props => (\n    <>\n        {\n            props.tree && props.tree.map(item => {\n                return (\n                    <Node\n                        key={item.key}\n                        title={item.title}\n                        tree={item.children}\n                        id={item.key}\n                        checkable={props.checkable}\n                    >\n                    </Node>\n                )\n            })\n        }\n    </>\n)\n\nconst Node = props => {\n    if (props.id === '0') {\n        return (\n            <TreeContext.Consumer>\n                {context => (\n                    <>\n                        {props.checkable && <input type=\"checkbox\"></input>}\n                        <span>{props.title}\n                            <Tick />\n                            <button\n                                id={props.id}\n                                onClick={() => { context.createNode(props.id) }}\n                            >➕</button>\n                        </span>\n                        <ul>\n                            {props.tree &&\n                                <Tree tree={props.tree} checkable={props.checkable}></Tree>\n                            }\n                        </ul>\n                    </>\n                )}\n            </TreeContext.Consumer>\n        )\n    }\n    return (\n        <TreeContext.Consumer>\n            {\n                context => (\n                    <li style={{ listStyle: \"none\" }}>\n                        {props.checkable && <input type=\"checkbox\"></input>}\n                        <button id={props.id} onClick={() => { context.deleteNode(props.id) }}>❌</button>\n                        <span>\n                            {props.title}\n                            <input placeholder=\"Note\"></input>\n                            <Tick />\n                            <button\n                                id={props.id}\n                                onClick={() => { context.createNode(props.id) }}\n                            >➕</button>\n                        </span>\n                        <ul>\n                            {props.tree &&\n                                <Tree tree={props.tree} checkable={props.checkable}></Tree>\n                            }\n                        </ul>\n                    </li>\n                )\n            }\n        </TreeContext.Consumer>\n    )\n\n}\n\n\nexport default Tree;","/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n */\nexport function convertTreeToList(treeNodeList) {\n    const flattenList = [];\n\n    function dig(list) {\n        list.forEach((treeNode) => {\n            flattenList.push(treeNode);\n            treeNode.children && treeNode.children.length > 0 && dig(treeNode.children);\n        })\n    }\n\n    dig(treeNodeList);\n\n    flattenList.map(item => item.parentId = item.key.split('-').slice(0, -1).join('-'));\n    flattenList[0].parentId = '-1'\n    return flattenList;\n}\n\n/**\n * Transform flatten list into nest tree data. This is used for virtual list render.\n * @param flattenList Origin data flatten list\n */\nexport function convertListToTree(flattenList) {\n    const treeNodeList = [];\n    const length = flattenList.length;\n\n    let record = {}, node;\n    flattenList.forEach(item => {\n        item.children = [];\n        record[item.key] = item;\n    });\n\n    for (let i = 0; i < length; i++) {\n        node = flattenList[i];\n        if (node.parentId !== '-1') {\n            record[node.parentId].children.push(node);\n        } else {\n            treeNodeList.push(node);\n        }\n    }\n\n    return treeNodeList\n}\n\n/**\n* Add child node to flatten list\n* @param flattenData Origin data flatten list\n* @param index Clicked parent node\n*/\nexport function add(flattenData, index) {\n    let num = 0;\n    let last = '0';\n\n    for (let i = 0; i < flattenData.length; i++) {\n        if (index === flattenData[i].parentId) {\n            last = flattenData[i].key.split('-').slice(-1);\n            if (num <= Number(last)) {\n                num = Number(last) + 1;\n            }\n        }\n    }\n\n    const currentIndex = `${index}-${num}`;\n    const title = Number(num) + 1;\n\n    flattenData.push({ key: `${currentIndex}`, title: `${title}-`, parentId: index })\n\n    return flattenData\n}\n\n","import React from \"react\";\n// import \"./styles.css\";\nimport Tree from './components/Tree'\nimport { TreeContext } from './components/contextTypes'\nimport { convertTreeToList, convertListToTree,add } from './util/treeUtil'\n\nclass App extends React.Component {\n  state = {\n    treeData: [{\n      key: '0',\n      title: '1-',\n      children: [],\n    }],\n  }\n\n\n  createNode = (index) => {\n    const { treeData } = this.state;\n    const flattenData = convertTreeToList(treeData);\n\n    const newFlattenData = add(flattenData ,index);\n\n    const newTreeData = convertListToTree(newFlattenData)\n    this.setState({\n      treeData: newTreeData\n    })\n  }\n\n  deleteNode = (index) => {\n    const { treeData } = this.state;\n    const flattenData = convertTreeToList(treeData);\n\n    const newFlattenData = flattenData.filter(item =>\n      item.key.slice(0, index.length) !== index\n    )\n\n    const newTreeData = convertListToTree(newFlattenData);\n\n    this.setState({\n      treeData: newTreeData\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <TreeContext.Provider value={{\n          createNode: this.createNode,\n          deleteNode: this.deleteNode,\n        }}>\n          <Tree tree={this.state.treeData} />\n        </TreeContext.Provider>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}